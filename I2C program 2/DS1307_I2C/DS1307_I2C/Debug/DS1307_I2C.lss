
DS1307_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b9  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000170  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000383  00000000  00000000  00001201  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016d  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 30       	cpi	r26, 0x04	; 4
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a4 e0       	ldi	r26, 0x04	; 4
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 30       	cpi	r26, 0x04	; 4
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  8a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:

	}
}
void usart_init()
{
	UCSRB=UCSRB|(1<<TXEN);
  92:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  94:	80 b5       	in	r24, 0x20	; 32
  96:	86 68       	ori	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
}
  9e:	08 95       	ret

000000a0 <i2c_stop>:
void i2c_stop(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  a0:	84 e9       	ldi	r24, 0x94	; 148
  a2:	86 bf       	out	0x36, r24	; 54
	
}
  a4:	08 95       	ret

000000a6 <i2c_init>:
void i2c_init(void)
{
	TWSR=0x00;
  a6:	11 b8       	out	0x01, r1	; 1
	TWBR=0x47;
  a8:	87 e4       	ldi	r24, 0x47	; 71
  aa:	80 b9       	out	0x00, r24	; 0
	TWCR=0x04;
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	86 bf       	out	0x36, r24	; 54
}
  b0:	08 95       	ret

000000b2 <txstring>:
    {
         
    }
}
void txstring(char *x)
{
  b2:	fc 01       	movw	r30, r24
	while(*x)
  b4:	80 81       	ld	r24, Z
  b6:	88 23       	and	r24, r24
  b8:	69 f0       	breq	.+26     	; 0xd4 <txstring+0x22>
    while(1)
    {
         
    }
}
void txstring(char *x)
  ba:	31 96       	adiw	r30, 0x01	; 1
{
	while(*x)
	{
		UDR=*x;
  bc:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0){}
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <txstring+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	8f e1       	ldi	r24, 0x1F	; 31
  c4:	9e e4       	ldi	r25, 0x4E	; 78
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <txstring+0x14>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <txstring+0x1a>
  cc:	00 00       	nop
         
    }
}
void txstring(char *x)
{
	while(*x)
  ce:	81 91       	ld	r24, Z+
  d0:	88 23       	and	r24, r24
  d2:	a1 f7       	brne	.-24     	; 0xbc <txstring+0xa>
  d4:	08 95       	ret

000000d6 <i2c_slave_address>:

	}
}
void i2c_slave_address()
{
	TWDR=0xD0;
  d6:	80 ed       	ldi	r24, 0xD0	; 208
  d8:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  da:	84 ec       	ldi	r24, 0xC4	; 196
  dc:	86 bf       	out	0x36, r24	; 54
	while( (TWCR&(1<<TWINT))==0);
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <i2c_slave_address+0x8>
	switch(TWSR)
  e4:	81 b1       	in	r24, 0x01	; 1
  e6:	88 31       	cpi	r24, 0x18	; 24
  e8:	19 f0       	breq	.+6      	; 0xf0 <i2c_slave_address+0x1a>
  ea:	80 32       	cpi	r24, 0x20	; 32
  ec:	59 f4       	brne	.+22     	; 0x104 <i2c_slave_address+0x2e>
  ee:	05 c0       	rjmp	.+10     	; 0xfa <i2c_slave_address+0x24>
	{
		case 0x18: txstring("SLA+W has been transmitted; ACK has been received\r"); break;
  f0:	80 e6       	ldi	r24, 0x60	; 96
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
  f8:	08 95       	ret
		case 0x20: txstring("SLA+W has been transmitted; NOT ACK has been received\r"); break;
  fa:	83 e9       	ldi	r24, 0x93	; 147
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 102:	08 95       	ret
		default: txstring("Error in addrss writing\r");
 104:	8a ec       	ldi	r24, 0xCA	; 202
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 10c:	08 95       	ret

0000010e <i2c_write>:
	TWBR=0x47;
	TWCR=0x04;
}
void i2c_write(unsigned char x)
{
	TWDR=x;
 10e:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 110:	84 ec       	ldi	r24, 0xC4	; 196
 112:	86 bf       	out	0x36, r24	; 54
	while( (TWCR&(1<<TWINT))==0);
 114:	06 b6       	in	r0, 0x36	; 54
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <i2c_write+0x6>
	switch(TWSR)
 11a:	81 b1       	in	r24, 0x01	; 1
 11c:	80 33       	cpi	r24, 0x30	; 48
 11e:	49 f0       	breq	.+18     	; 0x132 <i2c_write+0x24>
 120:	88 33       	cpi	r24, 0x38	; 56
 122:	61 f0       	breq	.+24     	; 0x13c <i2c_write+0x2e>
 124:	88 32       	cpi	r24, 0x28	; 40
 126:	79 f4       	brne	.+30     	; 0x146 <i2c_write+0x38>
	{
		case 0x28: txstring("Data byte has been transmitted; ACK has been received\r"); break;
 128:	83 ee       	ldi	r24, 0xE3	; 227
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 130:	08 95       	ret
		case 0x30: txstring("Data byte has been transmitted; NOT ACK has been received\r"); break;
 132:	8a e1       	ldi	r24, 0x1A	; 26
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 13a:	08 95       	ret
		case 0x38: txstring(" Arbitration lost in SLA+W or data bytes\r"); break;
 13c:	85 e5       	ldi	r24, 0x55	; 85
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 144:	08 95       	ret
		default: txstring("Error in data Transmission\r");
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 14e:	08 95       	ret

00000150 <i2c_start>:
void usart_init();
void i2c_slave_address();
void txstring(char *);
void i2c_start(void )
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEA)|(1<<TWEN);
 150:	84 ee       	ldi	r24, 0xE4	; 228
 152:	86 bf       	out	0x36, r24	; 54
	while( (TWCR&(1<<TWINT))==0);
 154:	06 b6       	in	r0, 0x36	; 54
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <i2c_start+0x4>
	switch(TWSR)
 15a:	81 b1       	in	r24, 0x01	; 1
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	19 f0       	breq	.+6      	; 0x166 <i2c_start+0x16>
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	59 f4       	brne	.+22     	; 0x17a <i2c_start+0x2a>
 164:	05 c0       	rjmp	.+10     	; 0x170 <i2c_start+0x20>
	{
		case 0x08: txstring("A START condition has been transmitted\r"); break;
 166:	8b e9       	ldi	r24, 0x9B	; 155
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 16e:	08 95       	ret
		case 0x10: txstring("A repeated START condition has been transmitted\r"); break;
 170:	83 ec       	ldi	r24, 0xC3	; 195
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 178:	08 95       	ret
		default: txstring("Error in START\r");
 17a:	84 ef       	ldi	r24, 0xF4	; 244
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 59 00 	call	0xb2	; 0xb2 <txstring>
 182:	08 95       	ret

00000184 <main>:
}


int main(void)
{
usart_init();
 184:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	DDRC=DDRC|(1<<PC0)|(1<<PC1);
 188:	84 b3       	in	r24, 0x14	; 20
 18a:	83 60       	ori	r24, 0x03	; 3
 18c:	84 bb       	out	0x14, r24	; 20
	TWBR=8;
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	80 b9       	out	0x00, r24	; 0
	
	i2c_start();
 192:	0e 94 a8 00 	call	0x150	; 0x150 <i2c_start>
	i2c_slave_address();
 196:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_slave_address>
	i2c_write(0x07);
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_write>
	i2c_write(0x00);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_write>
	i2c_stop();
 1a6:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_stop>
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	99 e6       	ldi	r25, 0x69	; 105
 1ae:	a8 e1       	ldi	r26, 0x18	; 24
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	a0 40       	sbci	r26, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x2c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x36>
 1ba:	00 00       	nop
    _delay_ms(1000);
	i2c_start();
 1bc:	0e 94 a8 00 	call	0x150	; 0x150 <i2c_start>
	i2c_slave_address();
 1c0:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_slave_address>
	i2c_write(0x00);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_write>
	i2c_write(0x55);
 1ca:	85 e5       	ldi	r24, 0x55	; 85
 1cc:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_write>
	i2c_write(0x58);
 1d0:	88 e5       	ldi	r24, 0x58	; 88
 1d2:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_write>
	i2c_write(0x19);
 1d6:	89 e1       	ldi	r24, 0x19	; 25
 1d8:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_write>
	
	
	i2c_stop();
 1dc:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_stop>
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <main+0x5c>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
