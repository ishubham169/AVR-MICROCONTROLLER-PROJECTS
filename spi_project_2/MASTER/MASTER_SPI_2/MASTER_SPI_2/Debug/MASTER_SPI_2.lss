
MASTER_SPI_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000023c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a2  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015b  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000399  00000000  00000000  00001095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000143  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  8a:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <transfer>:
void transfer(int x)
{
	
	
	
		SPDR= x;
  92:	8f b9       	out	0x0f, r24	; 15
	
		while( (SPSR&(1<<SPIF))==0);
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <transfer+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8f e6       	ldi	r24, 0x6F	; 111
  9a:	94 e9       	ldi	r25, 0x94	; 148
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <transfer+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <transfer+0x10>
  a2:	00 00       	nop
	   _delay_ms(19);	
	
}
  a4:	08 95       	ret

000000a6 <transfer1>:
void transfer1(char *x)
{
  a6:	fc 01       	movw	r30, r24
	
	while(*x!='\0')
  a8:	80 81       	ld	r24, Z
  aa:	88 23       	and	r24, r24
  ac:	69 f0       	breq	.+26     	; 0xc8 <transfer1+0x22>
	
		while( (SPSR&(1<<SPIF))==0);
	   _delay_ms(19);	
	
}
void transfer1(char *x)
  ae:	31 96       	adiw	r30, 0x01	; 1
{
	
	while(*x!='\0')
	{
	SPDR= *x++;
  b0:	8f b9       	out	0x0f, r24	; 15
	
	while( (SPSR&(1<<SPIF))==0);
  b2:	77 9b       	sbis	0x0e, 7	; 14
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <transfer1+0xc>
  b6:	8f e6       	ldi	r24, 0x6F	; 111
  b8:	94 e9       	ldi	r25, 0x94	; 148
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <transfer1+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <transfer1+0x1a>
  c0:	00 00       	nop
	
}
void transfer1(char *x)
{
	
	while(*x!='\0')
  c2:	81 91       	ld	r24, Z+
  c4:	88 23       	and	r24, r24
  c6:	a1 f7       	brne	.-24     	; 0xb0 <transfer1+0xa>
  c8:	08 95       	ret

000000ca <keyscan>:
}	
	
}
void keyscan()
{
	PORTA=PORTA&~(1<<col0);
  ca:	dc 98       	cbi	0x1b, 4	; 27
	PORTA=PORTA|(1<<col1)|(1<<col2)|(1<<col3);
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	80 6e       	ori	r24, 0xE0	; 224
  d0:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0)
  d2:	c8 99       	sbic	0x19, 0	; 25
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <keyscan+0x16>
	{
		transfer(7);
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
  de:	14 c0       	rjmp	.+40     	; 0x108 <keyscan+0x3e>
		
	}
	else if( (PINA&(1<<row1))==0)
  e0:	c9 99       	sbic	0x19, 1	; 25
  e2:	05 c0       	rjmp	.+10     	; 0xee <keyscan+0x24>
	{
		
		transfer(4);
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
  ec:	0d c0       	rjmp	.+26     	; 0x108 <keyscan+0x3e>
	}
	else if( (PINA&(1<<row2))==0)
  ee:	ca 99       	sbic	0x19, 2	; 25
  f0:	05 c0       	rjmp	.+10     	; 0xfc <keyscan+0x32>
	{
		
		transfer(1);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
  fa:	06 c0       	rjmp	.+12     	; 0x108 <keyscan+0x3e>
	}
	else if( (PINA&(1<<row3))==0)
  fc:	cb 99       	sbic	0x19, 3	; 25
  fe:	04 c0       	rjmp	.+8      	; 0x108 <keyscan+0x3e>
	{
		
		transfer(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
	}

	PORTA=PORTA&~(1<<col1);
 108:	dd 98       	cbi	0x1b, 5	; 27
	PORTA=PORTA|(1<<col0)|(1<<col2)|(1<<col3);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	80 6d       	ori	r24, 0xD0	; 208
 10e:	8b bb       	out	0x1b, r24	; 27

	if( (PINA&(1<<row0))==0)
 110:	c8 99       	sbic	0x19, 0	; 25
 112:	05 c0       	rjmp	.+10     	; 0x11e <keyscan+0x54>
	{
		
		transfer(8);
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 11c:	14 c0       	rjmp	.+40     	; 0x146 <keyscan+0x7c>
	}
	else if( (PINA&(1<<row1))==0)
 11e:	c9 99       	sbic	0x19, 1	; 25
 120:	05 c0       	rjmp	.+10     	; 0x12c <keyscan+0x62>
	{
		
		transfer(5);
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 12a:	0d c0       	rjmp	.+26     	; 0x146 <keyscan+0x7c>
	}
	else if( (PINA&(1<<row2))==0)
 12c:	ca 99       	sbic	0x19, 2	; 25
 12e:	05 c0       	rjmp	.+10     	; 0x13a <keyscan+0x70>
	{
		
		transfer(2);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 138:	06 c0       	rjmp	.+12     	; 0x146 <keyscan+0x7c>
	}
	else if( (PINA&(1<<row3))==0)
 13a:	cb 99       	sbic	0x19, 3	; 25
 13c:	04 c0       	rjmp	.+8      	; 0x146 <keyscan+0x7c>
	{
		
		transfer(0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
	}

	PORTA=PORTA&~(1<<col2);
 146:	de 98       	cbi	0x1b, 6	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col3);
 148:	8b b3       	in	r24, 0x1b	; 27
 14a:	80 6b       	ori	r24, 0xB0	; 176
 14c:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0)
 14e:	c8 99       	sbic	0x19, 0	; 25
 150:	05 c0       	rjmp	.+10     	; 0x15c <keyscan+0x92>
	{
		
		transfer(9);
 152:	89 e0       	ldi	r24, 0x09	; 9
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 15a:	14 c0       	rjmp	.+40     	; 0x184 <keyscan+0xba>
	}
	else if( (PINA&(1<<row1))==0)
 15c:	c9 99       	sbic	0x19, 1	; 25
 15e:	05 c0       	rjmp	.+10     	; 0x16a <keyscan+0xa0>
	{
		
		transfer(6);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 168:	0d c0       	rjmp	.+26     	; 0x184 <keyscan+0xba>
	}
	else if( (PINA&(1<<row2))==0)
 16a:	ca 99       	sbic	0x19, 2	; 25
 16c:	05 c0       	rjmp	.+10     	; 0x178 <keyscan+0xae>
	{
		
		transfer(3);
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 176:	06 c0       	rjmp	.+12     	; 0x184 <keyscan+0xba>
	}
	else if( (PINA&(1<<row3))==0)
 178:	cb 99       	sbic	0x19, 3	; 25
 17a:	04 c0       	rjmp	.+8      	; 0x184 <keyscan+0xba>
	{
		
		transfer(7);
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
	}

	PORTA=PORTA&~(1<<col3);
 184:	df 98       	cbi	0x1b, 7	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col2);
 186:	8b b3       	in	r24, 0x1b	; 27
 188:	80 67       	ori	r24, 0x70	; 112
 18a:	8b bb       	out	0x1b, r24	; 27

	if( (PINA&(1<<row0))==0)
 18c:	c8 99       	sbic	0x19, 0	; 25
 18e:	05 c0       	rjmp	.+10     	; 0x19a <keyscan+0xd0>
	{
		
		transfer(7);
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 198:	08 95       	ret
	}
	else if( (PINA&(1<<row1))==0)
 19a:	c9 99       	sbic	0x19, 1	; 25
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <keyscan+0xde>
	{
		
		transfer(7);
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 1a6:	08 95       	ret
	}
	else if( (PINA&(1<<row2))==0)
 1a8:	ca 99       	sbic	0x19, 2	; 25
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <keyscan+0xec>
	{
		
		transfer(7);
 1ac:	87 e0       	ldi	r24, 0x07	; 7
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 1b4:	08 95       	ret
	}
	else if( (PINA&(1<<row3))==0)
 1b6:	cb 99       	sbic	0x19, 3	; 25
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <keyscan+0xf8>
	{
		
		transfer(7);
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 49 00 	call	0x92	; 0x92 <transfer>
 1c2:	08 95       	ret

000001c4 <main>:
#define col2 6
#define col3 7
int main(void)
{
	
	DDRD=DDRD&~(1<<0);
 1c4:	88 98       	cbi	0x11, 0	; 17
	DDRD=DDRD&~(1<<1);
 1c6:	89 98       	cbi	0x11, 1	; 17
    DDRB=DDRB|(1<<PINB0)|(1<<PINB1);
 1c8:	87 b3       	in	r24, 0x17	; 23
 1ca:	83 60       	ori	r24, 0x03	; 3
 1cc:	87 bb       	out	0x17, r24	; 23
	DDRA=0b11110000;
 1ce:	80 ef       	ldi	r24, 0xF0	; 240
 1d0:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b00001111;
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	8b bb       	out	0x1b, r24	; 27
	DDRB=DDRB|(1<<PINB4)|(1<<PINB5)|(1<<PINB7);
 1d6:	87 b3       	in	r24, 0x17	; 23
 1d8:	80 6b       	ori	r24, 0xB0	; 176
 1da:	87 bb       	out	0x17, r24	; 23
     SPCR=SPCR|(1<<SPE)|(1<<SPR0)|(1<<MSTR)|(1<<DORD)|(1<<CPOL)|(1<<CPHA);
 1dc:	8d b1       	in	r24, 0x0d	; 13
 1de:	8d 67       	ori	r24, 0x7D	; 125
 1e0:	8d b9       	out	0x0d, r24	; 13
	 SPSR=(1<<SPI2X);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	8e b9       	out	0x0e, r24	; 14
	 PORTB=PORTB&~(1<<PINB4);
 1e6:	c4 98       	cbi	0x18, 4	; 24
	 PORTB=PORTB&~(1<<PINB0);
 1e8:	c0 98       	cbi	0x18, 0	; 24
	 PORTB=PORTB&~(1<<PINB1);
 1ea:	c1 98       	cbi	0x18, 1	; 24
	 DDRB=DDRB&~(1<<PINB6);
 1ec:	be 98       	cbi	0x17, 6	; 23
	 
	 PORTB=PORTB&~(1<<PINB0);
 1ee:	c0 98       	cbi	0x18, 0	; 24
	 PORTB=PORTB|(1<<1);_delay_ms(100);transfer1("GAME BEGINS  ");
 1f0:	c1 9a       	sbi	0x18, 1	; 24
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	90 e7       	ldi	r25, 0x70	; 112
 1f6:	a2 e0       	ldi	r26, 0x02	; 2
 1f8:	81 50       	subi	r24, 0x01	; 1
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	a0 40       	sbci	r26, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x34>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x3e>
 202:	00 00       	nop
 204:	c0 e6       	ldi	r28, 0x60	; 96
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <transfer1>
	 PORTB=PORTB&~(1<<PINB1); 
 20e:	c1 98       	cbi	0x18, 1	; 24
	 PORTB=PORTB|(1<<0);transfer1("GAME BEGINS  ");
 210:	c0 9a       	sbi	0x18, 0	; 24
 212:	ce 01       	movw	r24, r28
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <transfer1>
	 PORTB=PORTB|(1<<PINB0);
 218:	c0 9a       	sbi	0x18, 0	; 24
	 PORTB=PORTB|(1<<PINB1);
 21a:	c1 9a       	sbi	0x18, 1	; 24
	  
    while(1)
    {
	if((PIND&(1<<0))==0)
 21c:	80 99       	sbic	0x10, 0	; 16
 21e:	05 c0       	rjmp	.+10     	; 0x22a <main+0x66>
		{
		   PORTB=PORTB&~(1<<PINB0);	
 220:	c0 98       	cbi	0x18, 0	; 24
			PORTB=PORTB|(1<<1);
 222:	c1 9a       	sbi	0x18, 1	; 24
			keyscan();
 224:	0e 94 65 00 	call	0xca	; 0xca <keyscan>
 228:	f9 cf       	rjmp	.-14     	; 0x21c <main+0x58>
		
	}			
	else if((PIND&(1<<0))==1)
 22a:	80 9b       	sbis	0x10, 0	; 16
 22c:	f7 cf       	rjmp	.-18     	; 0x21c <main+0x58>
		{
			PORTB=PORTB&~(1<<1);
 22e:	c1 98       	cbi	0x18, 1	; 24
			PORTB=PORTB|(1<<0);
 230:	c0 9a       	sbi	0x18, 0	; 24
			keyscan();
 232:	0e 94 65 00 	call	0xca	; 0xca <keyscan>
 236:	f2 cf       	rjmp	.-28     	; 0x21c <main+0x58>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
